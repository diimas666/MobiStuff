// scripts/normalizeBrands.ts

import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Product from '../app/api/models/Product';
import { brands } from '../data/brands'; // üëà –ü—É—Ç—å –±–µ–∑ @ –¥–ª—è Node.js

dotenv.config();

async function normalizeBrands() {
  try {
    const uri = process.env.MONGODB_URI;

    if (!uri) {
      console.error(
        '‚ùå ENV-–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è MONGODB_URI –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env.'
      );
      process.exit(1);
    }

    await mongoose.connect(uri);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    const validHandles = brands.map((b) => b.handle);
    const products = await Product.find({ brand: { $exists: true } });

    let updated = 0;

    for (const product of products) {
      const originalBrand = product.brand;
      if (!originalBrand) continue;

      const normalized = originalBrand.toLowerCase();

      if (!validHandles.includes(normalized)) {
        console.warn(
          `‚õî –ü—Ä–æ–ø—É—â–µ–Ω: "${product.title}" ‚Äî –±—Ä–µ–Ω–¥ "${originalBrand}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ brands`
        );
        continue;
      }

      if (product.brand !== normalized) {
        product.brand = normalized;
        await product.save();
        updated++;
        console.log(`üîÅ –û–±–Ω–æ–≤–ª—ë–Ω: "${product.title}" ‚Üí brand: "${normalized}"`);
      }
    }

    console.log(`\nüéâ –ì–æ—Ç–æ–≤–æ! –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${updated}`);
    process.exit(0);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', err);
    process.exit(1);
  }
}

normalizeBrands();
