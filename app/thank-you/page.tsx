'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';

export default function ThankYouPage() {
  const router = useRouter();

  const [order, setOrder] = useState<any>(null);
  const [isSaving, setIsSaving] = useState(true);
  const [emailSent, setEmailSent] = useState(false);

  useEffect(() => {
    const stored = localStorage.getItem('lastOrder');
    if (!stored) {
      setIsSaving(false);
      return;
    }

    try {
      const parsed = JSON.parse(stored);
      setOrder(parsed);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ MongoDB
      fetch('/api/saveOrder', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(parsed),
      })
        .catch((err) => {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', err);
        })
        .finally(() => setIsSaving(false));

      // üëá –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      const alreadySent = localStorage.getItem('emailSent') === 'true';
      if (parsed.email && !alreadySent) {
        fetch('/api/sendEmail', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(parsed),
        })
          .then((res) => {
            if (res.ok) {
              setEmailSent(true);
              localStorage.setItem('emailSent', 'true'); // ‚úÖ —Ñ—ñ–∫—Å–∞—Ü—ñ—è
            } else {
              console.error('‚ùå Email –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ');
            }
          })
          .catch((err) => console.error('‚ùå Email –ø–æ–º–∏–ª–∫–∞:', err));
      }
    } catch (err) {
      console.error('‚ùå JSON parse error:', err);
      setIsSaving(false);
    }
  }, []);

  if (isSaving || !order) {
    return (
      <div className="flex flex-col justify-center items-center h-64 gap-4">
        <div className="animate-spin rounded-full h-12 w-12 border-t-4 border-green-500 border-solid"></div>
        <p className="text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...</p>
      </div>
    );
  }

  return (
    <div className="max-w-2xl mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4 text-center">
        ‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!
      </h1>
      <p className="mb-4 text-center">
        –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è.
        {emailSent && (
          <span className="block text-green-600 mt-2">
            üìß –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ {order.email}
          </span>
        )}
      </p>

      <div className="bg-gray-100 p-4 rounded space-y-2 text-sm">
        <p>
          <strong>–Ü–º‚Äô—è:</strong> {order.name} {order.lastName}
        </p>
        <p>
          <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {order.phone}
        </p>
        <p>
          <strong>–ú—ñ—Å—Ç–æ:</strong> {order.city}
        </p>
        <p>
          <strong>–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:</strong> {order.warehouse}
        </p>
        <p>
          <strong>–û–ø–ª–∞—Ç–∞:</strong>{' '}
          {order.paymentMethod === 'card' ? '–ö–∞—Ä—Ç–∫–æ—é' : '–ü—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ'}
        </p>
        <p>
          <strong>–°—É–º–∞:</strong> {order.total} ‚Ç¥
        </p>
        {order.comment && (
          <p>
            <strong>–ö–æ–º–µ–Ω—Ç–∞—Ä:</strong> {order.comment}
          </p>
        )}
      </div>

      <div className="mt-6 flex justify-center">
        <button
          onClick={() => router.push('/')}
          className="bg-green-600 text-white px-6 py-2 rounded hover:bg-green-700 transition cursor-pointer"
        >
          –ù–∞ –≥–æ–ª–æ–≤–Ω—É
        </button>
      </div>
    </div>
  );
}
