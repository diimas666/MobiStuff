'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';

export default function ThankYouPage() {
  const router = useRouter();
  const [order, setOrder] = useState<any>(null);
  const [isSaving, setIsSaving] = useState(true); // üü¢ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–∏ –∑–∞–∫–∞–∑

  useEffect(() => {
    const stored = localStorage.getItem('lastOrder');

    if (stored) {
      const parsed = JSON.parse(stored);
      setOrder(parsed);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ MongoDB
      fetch('/api/saveOrder', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(parsed),
      })
        .catch((error) => {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
        })
        .finally(() => {
          setIsSaving(false); // ‚úÖ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        });
    } else {
      setIsSaving(false); // –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–∞
    }
  }, []);

  useEffect(() => {
    if (!isSaving) {
      const timeout = setTimeout(() => {
        router.push('/');
      }, 8000);
      return () => clearTimeout(timeout);
    }
  }, [isSaving, router]);

  if (isSaving || !order) {
    return (
      <div className="flex flex-col justify-center items-center h-64 gap-4">
        <div className="animate-spin rounded-full h-12 w-12 border-t-4 border-green-500 border-solid"></div>
        <p className="text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...</p>
      </div>
    );
  }

  return (
    <div className="max-w-2xl mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</h1>
      <p className="mb-4">–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –ø—Ä–∏–π–Ω—è—Ç–æ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è.</p>
      <div className="bg-gray-100 p-4 rounded">
        <p>
          <strong>–Ü–º‚Äô—è:</strong> {order.name}
        </p>
        <p>
          <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {order.phone}
        </p>
        <p>
          <strong>–ú—ñ—Å—Ç–æ:</strong> {order.city}
        </p>
        <p>
          <strong>–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:</strong> {order.warehouse}
        </p>
        <p>
          <strong>–û–ø–ª–∞—Ç–∞:</strong>{' '}
          {order.paymentMethod === 'card' ? '–ö–∞—Ä—Ç–∫–æ—é' : '–ü—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ'}
        </p>
        <p>
          <strong>–°—É–º–∞:</strong> {order.total} ‚Ç¥
        </p>
      </div>
    </div>
  );
}
